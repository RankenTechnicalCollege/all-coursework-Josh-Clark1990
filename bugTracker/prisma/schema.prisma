datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid()) @map("_id")
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  givenName     String?
  familyName    String?
  role          String?
  createdBugs   String[]
  assignedBugs  String[]

  accounts      Account[]
  sessions      Session[]
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id           String    @id @default(cuid()) @map("_id")
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  
  @@unique([identifier, value])
}

model Bug {
  id                String   @id @default(cuid()) @map("_id")
  title             String
  description       String
  stepsToReproduce  String?
  authorOfBug       String
  status            Boolean  @default(false)
  statusLabel       String   @default("open")
  classification    String?
  assignedUser      String?
  assignedUserName  String?
  closed            Boolean  @default(false)
  closedDate        DateTime?
  createdAt         DateTime @default(now())
  lastUpdated       DateTime @updatedAt
  
  comments          Comment[]
  testCases         TestCase[]
}

model Comment {
  id         String   @id @default(cuid()) @map("_id")
  bugId      String
  text       String
  author     String
  authorName String
  createdAt  DateTime @default(now())
  
  bug Bug @relation(fields: [bugId], references: [id], onDelete: Cascade)
}

model TestCase {
  id          String   @id @default(cuid()) @map("_id")
  bugId       String
  title       String
  description String
  status      String
  author      String
  authorName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bug Bug @relation(fields: [bugId], references: [id], onDelete: Cascade)
}